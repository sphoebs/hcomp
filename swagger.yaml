swagger: "2.0"
info:
  version: 1.0.0
  title: "Social Human Computation"
  description: Social Human Computation API
  termsOfService: http://swagger.io/terms/
  contact:
    name: Hcomp Team
    url: https://hsoc.herokuapp.com/
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: hsoc.herokuapp.com
basePath: /
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /auth/login:
    post:
      tags:
      - "users"
      summary: "User Login"
      description: Controll user, if don't exist create and return id+jwt else only id+jwt
      operationId: createAndReturnUser
      parameters:
        - name: user
          in: body
          description: User
          required: true
          schema:
            $ref: '#/definitions/users'
      responses:
        200:
          description: id+jwt
        400:
          description: "Invalid ID supplied"
        
  /users/{userID}:
    get:
      tags:
      - "users"
      summary: "Get user by ID"
      description: "Returns a single user"
      operationId: returnUser
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/users"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "users"
      summary: "Update user by ID"
      description: "Updates a User status"
      operationId: updateUser
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        description: "ID of user to update"
        required: true
        type: "string"
      responses:
        200:
          description: "successful updated"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "users"
      summary: "Delete user by ID"
      description: "Deletes a user by ID"
      operationId: deleteUser
      parameters:
      - name: "userID"
        in: "path"
        description: "ID of user to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "User succesfully deleted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"

  /tasks:
    post:
      tags:
      - "tasks"
      summary: "Add Task"
      description: Creates a new Task
      operationId: createTask
      parameters:
        - name: task
          in: body
          description: Task
          required: true
          schema:
            $ref: '#/definitions/tasks'
      responses:
        200:
          description: id of task
        400:
          description: "Invalid ID supplied"
    get:
     tags:
     - "tasks"
     summary: "Get tasks by type"
     description: Get Tasks
     operationId: getTasks
     parameters:
     - name: "type"
       in: "query"
       description: "filter by type of tasks return"
       required: false
       type: "string"
     responses:
      200:
          description: return All tasks filtered by type
      400:
          description: "Invalid Type supplied"
        
  /tasks/{taskID}:
    get:
      tags:
      - "tasks"
      summary: "Get task by ID"
      description: "Returns a single task"
      operationId: returnTask
      produces:
      - "application/json"
      parameters:
      - name: "taskID"
        in: "path"
        description: "ID of task to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/tasks"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"
    put:
      tags:
      - "tasks"
      summary: "Update task by ID"
      description: "Updates a Task status"
      operationId: updateTask
      produces:
      - "application/json"
      parameters:
      - name: "taskID"
        in: "path"
        description: "ID of task to update"
        required: true
        type: "string"
      responses:
        200:
          description: "successful updated"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"
    delete:
      tags:
      - "tasks"
      summary: "Delete task by ID"
      description: "Deletes a task by ID"
      operationId: deleteTask
      parameters:
      - name: "taskID"
        in: "path"
        description: "ID of task to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Task succesfully deleted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"
          
  /tasks/creatorRecentTasks/{id}:
     get:
       tags:
         - "tasks"
       description: Returns the most creator recent tasks. 2 by default.
       produces:
         - application/json
       parameters:
           - name: id
             description: User id 
             in: path         
             required: true
             type: integer            
       responses:
         200:
           description: An array of Tasks
           schema:
             $ref: '#/definitions/tasks'          
          
  /tasks/runs:
    post:
      tags:
      - "runs"
      summary: "Add Run"
      description: Creates a new Run
      operationId: createRun
      parameters:
        - name: run
          in: body
          description: Run
          required: true
          schema:
            $ref: '#/definitions/runs'
      responses:
        200:
          description: id of run
        400:
          description: "Invalid ID supplied"
    get:
     tags:
     - "runs"
     summary: "Get run by type of task"
     description: Get a Run
     operationId: getRun
     parameters:
     - name: "type"
       in: "query"
       description: "filter by type of task of run return"
       required: false
       type: "string"
     responses:
      200:
          description: return All runs filtered by type
      400:
          description: "Invalid Type supplied"     
          
  /tasks/runs/{runID}:
    get:
      tags:
      - "runs"
      summary: "Get run by ID"
      description: "Returns a single run"
      operationId: getRunByID
      produces:
      - "application/json"
      parameters:
      - name: "runID"
        in: "path"
        description: "ID of run to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/runs"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Run not found"
    put:
      tags:
      - "runs"
      summary: "Update run by ID"
      description: "Updates a Run status"
      operationId: updateRun
      produces:
      - "application/json"
      parameters:
      - name: "runID"
        in: "path"
        description: "ID of run to update"
        required: true
        type: "string"
      responses:
        200:
          description: "successful updated"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Run not found"
    delete:
      tags:
      - "runs"
      summary: "Delete run by ID"
      description: "Deletes a run by ID"
      operationId: deleteRun
      parameters:
      - name: "runID"
        in: "path"
        description: "ID of run to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Run succesfully deleted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Run not found"  
          
  /tasks/runs/recentRuns/{id}:
     get:
       tags:
         - "runs"
       description: Returns the most recent runs. 2 by default. Also check if there are any friends 
                    who have made them. If so, users also returned. If id is null just return the most recent runs
       produces:
         - application/json
       parameters:
           - name: id
             description: User id 
             in: path         
             required: true
             type: integer            
       responses:
         200:
           description: An array of Runs and An array of Users
           schema:
             $ref: '#/definitions/runs'        
          
  /tasks/runs/assignments:
    post:
      tags:
      - "assignments"
      summary: "Add Assignment"
      description: Creates a new Assignment
      operationId: createAssignment
      parameters:
        - name: assignment
          in: body
          description: Assignment
          required: true
          schema:
            $ref: '#/definitions/assignments'
      responses:
        200:
          description: id of assignment
        400:
          description: "Invalid ID supplied"
    get:
     tags:
     - "assignments"
     summary: "Get assignment by type"
     description: get an  Assignment
     operationId: getAssignment
     parameters:
     - name: "type"
       in: "query"
       description: "filter by type of run of assignment return"
       required: false
       type: "string"
     responses:
      200:
          description: return All assignments filtered by type
      400:
          description: "Invalid Type supplied"     
          
  /tasks/runs/assignments/{assignmentID}:
    get:
      tags:
      - "assignments"
      summary: "Get assignment by ID"
      description: "Returns a single assignment"
      operationId: getAssignmentByID
      produces:
      - "application/json"
      parameters:
      - name: "assignmentID"
        in: "path"
        description: "ID of assignment to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/assignments"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Assignment not found"
    put:
      tags:
      - "assignments"
      summary: "Update assignment by ID"
      description: "Updates an Assignment status"
      operationId: updateAssignment
      produces:
      - "application/json"
      parameters:
      - name: "assignmentID"
        in: "path"
        description: "ID of assignment to update"
        required: true
        type: "string"
      responses:
        200:
          description: "successful updated"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Assignment not found"
    delete:
      tags:
      - "assignments"
      summary: "Delete assignments by ID"
      description: "Deletes an assignment by ID"
      operationId: deleteAssignment
      parameters:
      - name: "assignmentID"
        in: "path"
        description: "ID of assignment to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Assignment succesfully deleted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Assignment not found"  
  
  /tasks/runs/assignments/workerhistory/{id}:
    get:
      tags:
      - "assignments"
      description: Returns all assignments done by a given user id.                   
      produces:
       - application/json
      parameters:
        - name: id
          description: User id 
          in: path         
          required: true
          type: integer                
      responses:
         200:
          description: An array of Assignments and Users
          schema:
             $ref: '#/definitions/assignments'    
             
  
  /tasks/runs/assignments/guestmotivational:
      get:
        tags:
          - "assignments"
        description: Returns the most recent ten assignments done by worker users.
        produces:
          - application/json
        responses:
          200:
            description: An array of Assignments and Users
            schema:
              $ref: '#/definitions/assignments'

  /tasks/runs/assignments/creatormotivational/{id}:
      get:
        tags:
          - "assignments"
        description: Returns the most recent ten assignments done by worker users regarding your tasks.
        produces:
          - application/json
        parameters:
          - name: id
            description: User id 
            in: path         
            required: true
            type: integer            
        responses:
          200:
            description: An array of Assignments and Users
            schema:
              $ref: '#/definitions/assignments' 

  /tasks/runs/assignments/workermotivational/{id}:
      get:
        tags:
          - "assignments"
        description: Returns the most recent ten assignments done by your friends.
        produces:
          - application/json
        parameters:
            - name: id
              description: User id 
              in: path         
              required: true
              type: integer            
        responses:
          200:
            description: An array of Assignments and Users
            schema:
              $ref: '#/definitions/assignments'
  
  /runtypes:
    post:
      tags:
      - "runtypes"
      summary: "Add Run Type"
      description: Creates a new Run Type
      operationId: createRunType
      parameters:
        - name: runtype
          in: body
          description: Run Type
          required: true
          schema:
            $ref: '#/definitions/runtypes'
      responses:
        200:
          description: runtype succesfully created
        400:
          description: "Invalid ID supplied"
    get:
     tags:
     - "runtypes"
     summary: "Get runtype by type"
     description: get a Run Type
     operationId: getRunType
     parameters:
     - name: "type"
       in: "query"
       description: "filter by type of runtype return"
       required: false
       type: "string"
     responses:
      200:
          description: return runtype filtered by type
      400:
          description: "Invalid Type supplied"     
          
  /runtypes/{runtypeID}:
    get:
      tags:
      - "runtypes"
      summary: "Get runtype by ID"
      description: "Returns a single runtype"
      operationId: getRunTypeById
      produces:
      - "application/json"
      parameters:
      - name: "runtypeID"
        in: "path"
        description: "ID of runtype to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/runtypes"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Runtype not found"
    put:
      tags:
      - "runtypes"
      summary: "Update runtype by ID"
      description: "Updates a RunType status"
      operationId: updateRunType
      produces:
      - "application/json"
      parameters:
      - name: "runtypeID"
        in: "path"
        description: "ID of runtype to update"
        required: true
        type: "string"
      responses:
        200:
          description: "successful updated"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Runtype not found"
    delete:
      tags:
      - "runtypes"
      summary: "Delete runtype by ID"
      description: "Deletes a runtype by ID"
      operationId: deleteRunType
      parameters:
      - name: "runtypeID"
        in: "path"
        description: "ID of runtype to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Runtype succesfully deleted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "RunType not found"    


definitions:
  assignments:
     properties:
       id:
         type: integer
       id_worker:
         type: string
       id_task:
         type: integer
       id_run:
         type: integer
       answers:
         type: array
       "items": {
       "type": "string"
        }   
       is_in_progress:
         type: boolean
         default: false
       is_completed:
         type: boolean
  
  runs:
     properties:
       id:
         type: integer
       name:
         type: string
       description:
         type: string
       introduction:
         type: string
       images:
         type: array
       "images_items": {
       "type": "string"
        }   
       question:
         type: string
       tutorial:
         type: array
       "tutorial_items": {
       "type": "string"
        }
       id_runtype:
          type: integer
       id_task:
          type: integer
       is_deleted:
          type: boolean
       is_active:
          type: boolean
       max_assignments:
          type: integer
        
  tasks:
       properties:
         name:
           type: string
         id:
           type: integer
         description:
           type: string
         introduction:
           type: string
         avatar_image:
           type: string
         id_creator:
           type: integer
         is_deleted:
           type: boolean
           default: false
         is_active:
           type: boolean
           default: false 
  users:
     properties:
       id:
         type: string
       social_id:
         type: string
       accessToken:
         type: string
       accessType:
         type: string
       email:
           type: string
       name: 
           type: string
       img:
           type: string
       is_deleted:
         type: boolean
         default: false
       writer:
         type: boolean
         default: false  
  
  runtypes:
     properties:
       id:
         type: string
       runtype:
         type: string